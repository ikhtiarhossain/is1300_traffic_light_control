
PRO1_Ikhtiar_Hossain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080045ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080045ac  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb1b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcc  00000000  00000000  0002cb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f8  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c83  00000000  00000000  00030028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f413  00000000  00000000  00055cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6422  00000000  00000000  000650be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e94  00000000  00000000  0014b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0014e374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004530 	.word	0x08004530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004530 	.word	0x08004530

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <set_led>:

#include "functions.h"
#include <spi.h>

// handle the shift registers with spi3 to control the lights
void set_led(uint32_t shiftRegisters[]) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(&hspi3, shiftRegisters, 3, 1);
 80004cc:	2301      	movs	r3, #1
 80004ce:	2203      	movs	r2, #3
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <set_led+0x34>)
 80004d4:	f003 f80b 	bl	80034ee <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <set_led+0x38>)
 80004e0:	f001 fc2a 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <set_led+0x38>)
 80004ec:	f001 fc24 	bl	8001d38 <HAL_GPIO_WritePin>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	48000400 	.word	0x48000400

08000500 <pl1_switch_on>:

bool pl1_switch_on(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin) == 0) {
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 fbfc 	bl	8001d08 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d101      	bne.n	800051a <pl1_switch_on+0x1a>
		return true;
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <pl1_switch_on+0x1c>
	} else {
		return false;
 800051a:	2300      	movs	r3, #0
	}
}
 800051c:	4618      	mov	r0, r3
 800051e:	bd80      	pop	{r7, pc}

08000520 <pl2_switch_on>:
bool pl2_switch_on(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin) == 0) {
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <pl2_switch_on+0x1c>)
 8000528:	f001 fbee 	bl	8001d08 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d101      	bne.n	8000536 <pl2_switch_on+0x16>
		return true;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <pl2_switch_on+0x18>
	} else {
		return false;
 8000536:	2300      	movs	r3, #0
	}
}
 8000538:	4618      	mov	r0, r3
 800053a:	bd80      	pop	{r7, pc}
 800053c:	48000400 	.word	0x48000400

08000540 <tl1_switch_on>:

bool tl1_switch_on(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == 0) {
 8000544:	2110      	movs	r1, #16
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <tl1_switch_on+0x1c>)
 8000548:	f001 fbde 	bl	8001d08 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <tl1_switch_on+0x16>
		return true;
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <tl1_switch_on+0x18>
	} else {
		return false;
 8000556:	2300      	movs	r3, #0
	}
}
 8000558:	4618      	mov	r0, r3
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000800 	.word	0x48000800

08000560 <tl2_switch_on>:

bool tl2_switch_on(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == 0) {
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <tl2_switch_on+0x20>)
 800056a:	f001 fbcd 	bl	8001d08 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <tl2_switch_on+0x18>
		return true;
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <tl2_switch_on+0x1a>
	} else {
		return false;
 8000578:	2300      	movs	r3, #0
	}
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	48000400 	.word	0x48000400

08000584 <tl3_switch_on>:

bool tl3_switch_on(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin) == 0) {
 8000588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <tl3_switch_on+0x20>)
 800058e:	f001 fbbb 	bl	8001d08 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <tl3_switch_on+0x18>
		return true;
 8000598:	2301      	movs	r3, #1
 800059a:	e000      	b.n	800059e <tl3_switch_on+0x1a>
	} else {
		return false;
 800059c:	2300      	movs	r3, #0
	}
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000400 	.word	0x48000400

080005a8 <tl4_switch_on>:

bool tl4_switch_on(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin) == 0) {
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f001 fba8 	bl	8001d08 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <tl4_switch_on+0x1a>
		return true;
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <tl4_switch_on+0x1c>
	} else {
		return false;
 80005c2:	2300      	movs	r3, #0
	}
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <pl1_toggle>:

void pl1_toggle(uint32_t shiftRegisters[0], uint16_t toggleFreq) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	shiftRegisters[0] |= PL1_BLUE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff6f 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f8d9 	bl	80017a0 <HAL_Delay>
	shiftRegisters[0] &= ~(PL1_BLUE);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff62 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f8cc 	bl	80017a0 <HAL_Delay>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <pl2_toggle>:

void pl2_toggle(uint32_t shiftRegisters[0], uint16_t toggleFreq) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
	shiftRegisters[0] |= PL2_BLUE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff4b 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	4618      	mov	r0, r3
 8000632:	f001 f8b5 	bl	80017a0 <HAL_Delay>
	shiftRegisters[0] &= ~(PL2_BLUE);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff3e 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f8a8 	bl	80017a0 <HAL_Delay>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <both_toggle>:

void both_toggle(uint32_t shiftRegisters[0], uint16_t toggleFreq) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	shiftRegisters[0] |= PL1_BLUE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= PL2_BLUE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff21 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f88b 	bl	80017a0 <HAL_Delay>
	shiftRegisters[0] &= ~(PL1_BLUE);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(PL2_BLUE);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff0e 	bl	80004c4 <set_led>
	HAL_Delay(toggleFreq);
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f878 	bl	80017a0 <HAL_Delay>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <walk1_red>:
void walk1_red(uint32_t shiftRegisters[0]) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= PL1_RED;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(PL1_GREEN);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff fef3 	bl	80004c4 <set_led>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <walk1_green>:

void walk1_green(uint32_t shiftRegisters[0]) {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= PL1_GREEN;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(PL1_RED);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fedc 	bl	80004c4 <set_led>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <walk2_red>:

void walk2_red(uint32_t shiftRegisters[0]) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= PL2_RED;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(PL2_GREEN);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fec5 	bl	80004c4 <set_led>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <walk2_green>:


void walk2_green(uint32_t shiftRegisters[0]) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= PL2_GREEN;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(PL2_RED);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff feae 	bl	80004c4 <set_led>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <vertical_lane_red>:

void vertical_lane_red(uint32_t shiftRegisters[0]) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL4_RED;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f043 0208 	orr.w	r2, r3, #8
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL2_RED;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_GREEN);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 0220 	bic.w	r2, r3, #32
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_GREEN);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_ORANGE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f023 0210 	bic.w	r2, r3, #16
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_ORANGE);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe7f 	bl	80004c4 <set_led>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <vertical_lane_orange>:

void vertical_lane_orange(uint32_t shiftRegisters[0]) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL4_ORANGE;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f043 0210 	orr.w	r2, r3, #16
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL2_ORANGE;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_GREEN);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f023 0220 	bic.w	r2, r3, #32
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_GREEN);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_RED);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f023 0208 	bic.w	r2, r3, #8
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_RED);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fe50 	bl	80004c4 <set_led>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <vertical_lane_green>:

void vertical_lane_green(uint32_t shiftRegisters[0]) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL4_GREEN;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f043 0220 	orr.w	r2, r3, #32
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL2_GREEN;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_RED);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f023 0208 	bic.w	r2, r3, #8
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_RED);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL4_ORANGE);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f023 0210 	bic.w	r2, r3, #16
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL2_ORANGE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fe21 	bl	80004c4 <set_led>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <horizontal_lane_red>:

void horizontal_lane_red(uint32_t shiftRegisters[0]) {
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL1_RED;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL3_RED;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_GREEN);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_GREEN);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f023 0204 	bic.w	r2, r3, #4
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_ORANGE);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_ORANGE);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 0202 	bic.w	r2, r3, #2
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fdf2 	bl	80004c4 <set_led>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <horizontal_lane_orange>:

void horizontal_lane_orange(uint32_t shiftRegisters[0]) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL1_ORANGE;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL3_ORANGE;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f043 0202 	orr.w	r2, r3, #2
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_GREEN);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_GREEN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 0204 	bic.w	r2, r3, #4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_RED);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_RED);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0201 	bic.w	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fdc3 	bl	80004c4 <set_led>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <horizontal_lane_green>:

void horizontal_lane_green(uint32_t shiftRegisters[0]) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	shiftRegisters[0] |= TL1_GREEN;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] |= TL3_GREEN;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f043 0204 	orr.w	r2, r3, #4
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_RED);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_RED);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f023 0201 	bic.w	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL1_ORANGE);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
	shiftRegisters[0] &= ~(TL3_ORANGE);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f023 0202 	bic.w	r2, r3, #2
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
	set_led(shiftRegisters);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fd94 	bl	80004c4 <set_led>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <v_cars>:
			walk2_red(shiftRegisters);
		}
	}
}

bool v_cars(void){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	if (tl2_switch_on() == true || tl4_switch_on() == true) {
 80009a8:	f7ff fdda 	bl	8000560 <tl2_switch_on>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <v_cars+0x18>
 80009b2:	f7ff fdf9 	bl	80005a8 <tl4_switch_on>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <v_cars+0x1c>
		return true;
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <v_cars+0x1e>
	} else {
		return false;
 80009c0:	2300      	movs	r3, #0
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <h_cars>:

bool h_cars(void){
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
	if (tl1_switch_on() == true || tl3_switch_on() == true) {
 80009ca:	f7ff fdb9 	bl	8000540 <tl1_switch_on>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <h_cars+0x18>
 80009d4:	f7ff fdd6 	bl	8000584 <tl3_switch_on>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <h_cars+0x1c>
		return true;
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <h_cars+0x1e>
	} else {
		return false;
 80009e2:	2300      	movs	r3, #0
	}
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a5e      	ldr	r2, [pc, #376]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b5c      	ldr	r3, [pc, #368]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b59      	ldr	r3, [pc, #356]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a52      	ldr	r2, [pc, #328]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b4d      	ldr	r3, [pc, #308]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a4c      	ldr	r2, [pc, #304]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <MX_GPIO_Init+0x194>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 f967 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4843      	ldr	r0, [pc, #268]	; (8000b80 <MX_GPIO_Init+0x198>)
 8000a72:	f001 f961 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	4842      	ldr	r0, [pc, #264]	; (8000b84 <MX_GPIO_Init+0x19c>)
 8000a7c:	f001 f95c 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f001 f955 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_595_Pin;
 8000a8e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 ff83 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_Car_Pin;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4830      	ldr	r0, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x19c>)
 8000ac4:	f000 ff76 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4827      	ldr	r0, [pc, #156]	; (8000b80 <MX_GPIO_Init+0x198>)
 8000ae2:	f000 ff67 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|TL3_Car_Pin;
 8000ae6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x198>)
 8000afe:	f000 ff59 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	481a      	ldr	r0, [pc, #104]	; (8000b84 <MX_GPIO_Init+0x19c>)
 8000b1a:	f000 ff4b 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 ff3c 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 8000b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 ff2d 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0x198>)
 8000b70:	f000 ff20 	bl	80019b4 <HAL_GPIO_Init>

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000800 	.word	0x48000800

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8c:	f000 fd8c 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f809 	bl	8000ba6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b94:	f7ff ff28 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b98:	f000 fcd0 	bl	800153c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000b9c:	f000 fbce 	bl	800133c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  test_program();
#else
  main_program();
 8000ba0:	f000 f858 	bl	8000c54 <main_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <main+0x1c>

08000ba6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b096      	sub	sp, #88	; 0x58
 8000baa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2244      	movs	r2, #68	; 0x44
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fc8e 	bl	80044d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bcc:	f001 f8da 	bl	8001d84 <HAL_PWREx_ControlVoltageScaling>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd6:	f000 f837 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f911 	bl	8001e30 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c14:	f000 f818 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fcd9 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c3c:	f000 f804 	bl	8000c48 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3758      	adds	r7, #88	; 0x58
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <main_program>:
	V_LANE, H_LANE, CROSS_1, CROSS_2, SWAP_LANE
} States;

States state, next_state, prev_lane_state;

void main_program(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
	uint32_t shiftRegisters[] = {0x000000};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
	set_led(shiftRegisters);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc2f 	bl	80004c4 <set_led>
	uint32_t counter;
	bool pl1Pressed = false;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
	bool pl2Pressed = false;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73bb      	strb	r3, [r7, #14]

	while(1) {

		state = next_state;
 8000c6e:	4bb9      	ldr	r3, [pc, #740]	; (8000f54 <main_program+0x300>)
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4bb9      	ldr	r3, [pc, #740]	; (8000f58 <main_program+0x304>)
 8000c74:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8000c76:	4bb8      	ldr	r3, [pc, #736]	; (8000f58 <main_program+0x304>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d8f7      	bhi.n	8000c6e <main_program+0x1a>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <main_program+0x30>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000c99 	.word	0x08000c99
 8000c88:	08000df7 	.word	0x08000df7
 8000c8c:	08000f61 	.word	0x08000f61
 8000c90:	080010eb 	.word	0x080010eb
 8000c94:	08001275 	.word	0x08001275
		case V_LANE:
			vertical_lane_green(shiftRegisters);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fdc6 	bl	800082c <vertical_lane_green>
			horizontal_lane_red(shiftRegisters);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdf1 	bl	800088a <horizontal_lane_red>
			walk1_green(shiftRegisters);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd1b 	bl	80006e6 <walk1_green>
			walk2_red(shiftRegisters);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd2e 	bl	8000714 <walk2_red>

			if (pl1Pressed == true) {
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <main_program+0x78>
				prev_lane_state = V_LANE;
 8000cbe:	4ba7      	ldr	r3, [pc, #668]	; (8000f5c <main_program+0x308>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_1;
 8000cc4:	4ba3      	ldr	r3, [pc, #652]	; (8000f54 <main_program+0x300>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
				break;
 8000cca:	e331      	b.n	8001330 <main_program+0x6dc>
			}
			if (pl2Pressed == true) {
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <main_program+0x8c>
				prev_lane_state = V_LANE;
 8000cd2:	4ba2      	ldr	r3, [pc, #648]	; (8000f5c <main_program+0x308>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_2;
 8000cd8:	4b9e      	ldr	r3, [pc, #632]	; (8000f54 <main_program+0x300>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	701a      	strb	r2, [r3, #0]
				break;
 8000cde:	e327      	b.n	8001330 <main_program+0x6dc>
			}

			if (v_cars() == false && h_cars() == true) {
 8000ce0:	f7ff fe60 	bl	80009a4 <v_cars>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00b      	beq.n	8000d08 <main_program+0xb4>
 8000cf0:	f7ff fe69 	bl	80009c6 <h_cars>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <main_program+0xb4>
				prev_lane_state = V_LANE;
 8000cfa:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <main_program+0x308>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000d00:	4b94      	ldr	r3, [pc, #592]	; (8000f54 <main_program+0x300>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	701a      	strb	r2, [r3, #0]
				break;
 8000d06:	e313      	b.n	8001330 <main_program+0x6dc>
			}

			if (v_cars() == false && h_cars() == false) {
 8000d08:	f7ff fe4c 	bl	80009a4 <v_cars>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f083 0301 	eor.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d029      	beq.n	8000d6c <main_program+0x118>
 8000d18:	f7ff fe55 	bl	80009c6 <h_cars>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d021      	beq.n	8000d6c <main_program+0x118>
				counter = HAL_GetTick();
 8000d28:	f000 fd2e 	bl	8001788 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
				while ( (HAL_GetTick() - counter) < greenDelay) {
 8000d2e:	e00e      	b.n	8000d4e <main_program+0xfa>
					if (v_cars() == true || h_cars() == true || pl2_switch_on() == true) {
 8000d30:	f7ff fe38 	bl	80009a4 <v_cars>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d112      	bne.n	8000d60 <main_program+0x10c>
 8000d3a:	f7ff fe44 	bl	80009c6 <h_cars>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10d      	bne.n	8000d60 <main_program+0x10c>
 8000d44:	f7ff fbec 	bl	8000520 <pl2_switch_on>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d108      	bne.n	8000d60 <main_program+0x10c>
				while ( (HAL_GetTick() - counter) < greenDelay) {
 8000d4e:	f000 fd1b 	bl	8001788 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d3e7      	bcc.n	8000d30 <main_program+0xdc>
						break;
					}
				}
				prev_lane_state = V_LANE;
 8000d60:	4b7e      	ldr	r3, [pc, #504]	; (8000f5c <main_program+0x308>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <main_program+0x300>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	701a      	strb	r2, [r3, #0]
			}

			if (v_cars() == true && h_cars() == true) {
 8000d6c:	f7ff fe1a 	bl	80009a4 <v_cars>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01e      	beq.n	8000db4 <main_program+0x160>
 8000d76:	f7ff fe26 	bl	80009c6 <h_cars>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d019      	beq.n	8000db4 <main_program+0x160>
				counter = HAL_GetTick();
 8000d80:	f000 fd02 	bl	8001788 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
				while ( (HAL_GetTick() - counter) < redDelayMax) {
 8000d86:	e004      	b.n	8000d92 <main_program+0x13e>
					if (pl2_switch_on() == true) {
 8000d88:	f7ff fbca 	bl	8000520 <pl2_switch_on>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <main_program+0x152>
				while ( (HAL_GetTick() - counter) < redDelayMax) {
 8000d92:	f000 fcf9 	bl	8001788 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d3f1      	bcc.n	8000d88 <main_program+0x134>
 8000da4:	e000      	b.n	8000da8 <main_program+0x154>
						break;
 8000da6:	bf00      	nop
					}
				}
				prev_lane_state = V_LANE;
 8000da8:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <main_program+0x308>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <main_program+0x300>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	701a      	strb	r2, [r3, #0]
			}


			if (pl2_switch_on() == true) {
 8000db4:	f7ff fbb4 	bl	8000520 <pl2_switch_on>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d008      	beq.n	8000dd0 <main_program+0x17c>
				pl2Pressed = true;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73bb      	strb	r3, [r7, #14]
				prev_lane_state = V_LANE;
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <main_program+0x308>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_2;
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <main_program+0x300>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e2af      	b.n	8001330 <main_program+0x6dc>
			}

			if (v_cars() == true && h_cars() == false) {
 8000dd0:	f7ff fde8 	bl	80009a4 <v_cars>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 82a6 	beq.w	8001328 <main_program+0x6d4>
 8000ddc:	f7ff fdf3 	bl	80009c6 <h_cars>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 829d 	beq.w	8001328 <main_program+0x6d4>
				next_state = V_LANE;
 8000dee:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <main_program+0x300>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000df4:	e298      	b.n	8001328 <main_program+0x6d4>

		case H_LANE:
			horizontal_lane_green(shiftRegisters);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fda4 	bl	8000946 <horizontal_lane_green>
			vertical_lane_red(shiftRegisters);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fcb5 	bl	8000770 <vertical_lane_red>
			walk1_red(shiftRegisters);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fc55 	bl	80006b8 <walk1_red>
			walk2_green(shiftRegisters);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fc96 	bl	8000742 <walk2_green>

			if (pl2Pressed == true) {
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <main_program+0x1d6>
				prev_lane_state = H_LANE;
 8000e1c:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <main_program+0x308>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_2;
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <main_program+0x300>)
 8000e24:	2203      	movs	r2, #3
 8000e26:	701a      	strb	r2, [r3, #0]
				break;
 8000e28:	e282      	b.n	8001330 <main_program+0x6dc>
			}
			if (pl1Pressed == true) {
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <main_program+0x1ea>
				prev_lane_state = H_LANE;
 8000e30:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <main_program+0x308>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_1;
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <main_program+0x300>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	701a      	strb	r2, [r3, #0]
				break;
 8000e3c:	e278      	b.n	8001330 <main_program+0x6dc>
			}

			if (h_cars() == false && v_cars() == true) {
 8000e3e:	f7ff fdc2 	bl	80009c6 <h_cars>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f083 0301 	eor.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <main_program+0x212>
 8000e4e:	f7ff fda9 	bl	80009a4 <v_cars>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <main_program+0x212>
				prev_lane_state = H_LANE;
 8000e58:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <main_program+0x308>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <main_program+0x300>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	701a      	strb	r2, [r3, #0]
				break;
 8000e64:	e264      	b.n	8001330 <main_program+0x6dc>
			}

			if (h_cars() == false && v_cars() == false) {
 8000e66:	f7ff fdae 	bl	80009c6 <h_cars>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f083 0301 	eor.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d029      	beq.n	8000eca <main_program+0x276>
 8000e76:	f7ff fd95 	bl	80009a4 <v_cars>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d021      	beq.n	8000eca <main_program+0x276>
				counter = HAL_GetTick();
 8000e86:	f000 fc7f 	bl	8001788 <HAL_GetTick>
 8000e8a:	60b8      	str	r0, [r7, #8]
				while ( (HAL_GetTick() - counter) < greenDelay) {
 8000e8c:	e00e      	b.n	8000eac <main_program+0x258>
					if (v_cars() == true || h_cars() == true || pl1_switch_on() == true) {
 8000e8e:	f7ff fd89 	bl	80009a4 <v_cars>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d112      	bne.n	8000ebe <main_program+0x26a>
 8000e98:	f7ff fd95 	bl	80009c6 <h_cars>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10d      	bne.n	8000ebe <main_program+0x26a>
 8000ea2:	f7ff fb2d 	bl	8000500 <pl1_switch_on>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d108      	bne.n	8000ebe <main_program+0x26a>
				while ( (HAL_GetTick() - counter) < greenDelay) {
 8000eac:	f000 fc6c 	bl	8001788 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f241 7270 	movw	r2, #6000	; 0x1770
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d3e7      	bcc.n	8000e8e <main_program+0x23a>
						break;
					}
				}
				prev_lane_state = H_LANE;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <main_program+0x308>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <main_program+0x300>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	701a      	strb	r2, [r3, #0]
			}

			if (h_cars() == true && v_cars() == true) {
 8000eca:	f7ff fd7c 	bl	80009c6 <h_cars>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d01e      	beq.n	8000f12 <main_program+0x2be>
 8000ed4:	f7ff fd66 	bl	80009a4 <v_cars>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d019      	beq.n	8000f12 <main_program+0x2be>
				counter = HAL_GetTick();
 8000ede:	f000 fc53 	bl	8001788 <HAL_GetTick>
 8000ee2:	60b8      	str	r0, [r7, #8]
				while ( (HAL_GetTick() - counter) < redDelayMax) {
 8000ee4:	e004      	b.n	8000ef0 <main_program+0x29c>
					if (pl1_switch_on() == true) {
 8000ee6:	f7ff fb0b 	bl	8000500 <pl1_switch_on>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <main_program+0x2b0>
				while ( (HAL_GetTick() - counter) < redDelayMax) {
 8000ef0:	f000 fc4a 	bl	8001788 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d3f1      	bcc.n	8000ee6 <main_program+0x292>
 8000f02:	e000      	b.n	8000f06 <main_program+0x2b2>
						break;
 8000f04:	bf00      	nop
					}
				}
				prev_lane_state = H_LANE;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <main_program+0x308>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
				next_state = SWAP_LANE;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <main_program+0x300>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	701a      	strb	r2, [r3, #0]
			}

			if (pl1_switch_on() == true) {
 8000f12:	f7ff faf5 	bl	8000500 <pl1_switch_on>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d008      	beq.n	8000f2e <main_program+0x2da>
				pl1Pressed = true;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
				prev_lane_state = H_LANE;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <main_program+0x308>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
				next_state = CROSS_1;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <main_program+0x300>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	701a      	strb	r2, [r3, #0]
				break;
 8000f2c:	e200      	b.n	8001330 <main_program+0x6dc>
			}

			if (h_cars() == true && v_cars() == false) {
 8000f2e:	f7ff fd4a 	bl	80009c6 <h_cars>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 81f9 	beq.w	800132c <main_program+0x6d8>
 8000f3a:	f7ff fd33 	bl	80009a4 <v_cars>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f083 0301 	eor.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 81f0 	beq.w	800132c <main_program+0x6d8>
				next_state = H_LANE;
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <main_program+0x300>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000f52:	e1eb      	b.n	800132c <main_program+0x6d8>
 8000f54:	20000029 	.word	0x20000029
 8000f58:	20000028 	.word	0x20000028
 8000f5c:	2000002a 	.word	0x2000002a

		case CROSS_1:
			counter = HAL_GetTick();
 8000f60:	f000 fc12 	bl	8001788 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < pedestrianDelay) {
 8000f66:	e035      	b.n	8000fd4 <main_program+0x380>
				if (pl2Pressed == true) {
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <main_program+0x32a>
					both_toggle(shiftRegisters, toggleFreq);
 8000f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fb6e 	bl	8000658 <both_toggle>
 8000f7c:	e006      	b.n	8000f8c <main_program+0x338>
				} else {
					pl1_toggle(shiftRegisters, toggleFreq);
 8000f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fb1e 	bl	80005c8 <pl1_toggle>
				}

				if((HAL_GetTick() - counter) > (pedestrianDelay - orangeDelay)) {
 8000f8c:	f000 fbfc 	bl	8001788 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d916      	bls.n	8000fd4 <main_program+0x380>
					horizontal_lane_orange(shiftRegisters);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc9d 	bl	80008e8 <horizontal_lane_orange>
					vertical_lane_orange(shiftRegisters);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fc0c 	bl	80007ce <vertical_lane_orange>
					walk1_red(shiftRegisters);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fb7d 	bl	80006b8 <walk1_red>
					walk2_red(shiftRegisters);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fba7 	bl	8000714 <walk2_red>

					if (pl2_switch_on() == true) {
 8000fc6:	f7ff faab 	bl	8000520 <pl2_switch_on>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <main_program+0x380>
						pl2Pressed = true;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73bb      	strb	r3, [r7, #14]
			while ((HAL_GetTick() - counter) < pedestrianDelay) {
 8000fd4:	f000 fbd8 	bl	8001788 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3c0      	bcc.n	8000f68 <main_program+0x314>
					}
				}
			}

			counter = HAL_GetTick();
 8000fe6:	f000 fbcf 	bl	8001788 <HAL_GetTick>
 8000fea:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < walkingDelay) {
 8000fec:	e020      	b.n	8001030 <main_program+0x3dc>
				vertical_lane_green(shiftRegisters);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc1b 	bl	800082c <vertical_lane_green>
				horizontal_lane_red(shiftRegisters);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fc46 	bl	800088a <horizontal_lane_red>
				walk1_green(shiftRegisters);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fb70 	bl	80006e6 <walk1_green>
				walk2_red(shiftRegisters);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fb83 	bl	8000714 <walk2_red>

				if (pl2_switch_on() == true) {
 800100e:	f7ff fa87 	bl	8000520 <pl2_switch_on>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <main_program+0x3c8>
					pl2Pressed = true;
 8001018:	2301      	movs	r3, #1
 800101a:	73bb      	strb	r3, [r7, #14]
				}
				if (pl2Pressed == true) {
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <main_program+0x3dc>
					pl2_toggle(shiftRegisters, toggleFreq);
 8001022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff faf0 	bl	8000610 <pl2_toggle>
			while ((HAL_GetTick() - counter) < walkingDelay) {
 8001030:	f000 fbaa 	bl	8001788 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800103e:	4293      	cmp	r3, r2
 8001040:	d3d5      	bcc.n	8000fee <main_program+0x39a>
				}
			}
			pl1Pressed = false;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

			counter = HAL_GetTick();
 8001046:	f000 fb9f 	bl	8001788 <HAL_GetTick>
 800104a:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < orangeDelay) {
 800104c:	e040      	b.n	80010d0 <main_program+0x47c>
				vertical_lane_orange(shiftRegisters);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fbbc 	bl	80007ce <vertical_lane_orange>
				horizontal_lane_orange(shiftRegisters);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc45 	bl	80008e8 <horizontal_lane_orange>
				walk1_red(shiftRegisters);
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fb29 	bl	80006b8 <walk1_red>
				walk2_red(shiftRegisters);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fb53 	bl	8000714 <walk2_red>

				if (pl1_switch_on() == true) {
 800106e:	f7ff fa47 	bl	8000500 <pl1_switch_on>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <main_program+0x428>
					pl1Pressed = true;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
				}
				if (pl2_switch_on() == true) {
 800107c:	f7ff fa50 	bl	8000520 <pl2_switch_on>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <main_program+0x436>
					pl2Pressed = true;
 8001086:	2301      	movs	r3, #1
 8001088:	73bb      	strb	r3, [r7, #14]
				}

				if (pl1Pressed == true && pl2Pressed == true) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <main_program+0x452>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <main_program+0x452>
					both_toggle(shiftRegisters, toggleFreq);
 8001096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fada 	bl	8000658 <both_toggle>
 80010a4:	e014      	b.n	80010d0 <main_program+0x47c>
				} else if (pl1Pressed == true) {
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <main_program+0x468>
					pl1_toggle(shiftRegisters, toggleFreq);
 80010ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa87 	bl	80005c8 <pl1_toggle>
 80010ba:	e009      	b.n	80010d0 <main_program+0x47c>
				} else if (pl2Pressed == true) {
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <main_program+0x47c>
					pl2_toggle(shiftRegisters, toggleFreq);
 80010c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff faa0 	bl	8000610 <pl2_toggle>
			while ((HAL_GetTick() - counter) < orangeDelay) {
 80010d0:	f000 fb5a 	bl	8001788 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010de:	4293      	cmp	r3, r2
 80010e0:	d3b5      	bcc.n	800104e <main_program+0x3fa>
				}
			}
			next_state = H_LANE;
 80010e2:	4b94      	ldr	r3, [pc, #592]	; (8001334 <main_program+0x6e0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]

			break;
 80010e8:	e122      	b.n	8001330 <main_program+0x6dc>

		case CROSS_2:
			counter = HAL_GetTick();
 80010ea:	f000 fb4d 	bl	8001788 <HAL_GetTick>
 80010ee:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < pedestrianDelay) {
 80010f0:	e035      	b.n	800115e <main_program+0x50a>
				if (pl1Pressed == true) {
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <main_program+0x4b4>
					both_toggle(shiftRegisters, toggleFreq);
 80010f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff faa9 	bl	8000658 <both_toggle>
 8001106:	e006      	b.n	8001116 <main_program+0x4c2>
				} else {
					pl2_toggle(shiftRegisters, toggleFreq);
 8001108:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa7d 	bl	8000610 <pl2_toggle>
				}

				if((HAL_GetTick() - counter) > (pedestrianDelay - orangeDelay)) {
 8001116:	f000 fb37 	bl	8001788 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001124:	4611      	mov	r1, r2
 8001126:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800112a:	1a8a      	subs	r2, r1, r2
 800112c:	4293      	cmp	r3, r2
 800112e:	d916      	bls.n	800115e <main_program+0x50a>
					horizontal_lane_orange(shiftRegisters);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fbd8 	bl	80008e8 <horizontal_lane_orange>
					vertical_lane_orange(shiftRegisters);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fb47 	bl	80007ce <vertical_lane_orange>
					walk1_red(shiftRegisters);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fab8 	bl	80006b8 <walk1_red>
					walk2_red(shiftRegisters);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fae2 	bl	8000714 <walk2_red>

					if (pl1_switch_on() == true) {
 8001150:	f7ff f9d6 	bl	8000500 <pl1_switch_on>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <main_program+0x50a>
						pl1Pressed = true;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
			while ((HAL_GetTick() - counter) < pedestrianDelay) {
 800115e:	f000 fb13 	bl	8001788 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800116c:	4293      	cmp	r3, r2
 800116e:	d3c0      	bcc.n	80010f2 <main_program+0x49e>
					}
				}
			}

			counter = HAL_GetTick();
 8001170:	f000 fb0a 	bl	8001788 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < walkingDelay) {
 8001176:	e020      	b.n	80011ba <main_program+0x566>
				vertical_lane_red(shiftRegisters);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff faf8 	bl	8000770 <vertical_lane_red>
				horizontal_lane_green(shiftRegisters);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fbdf 	bl	8000946 <horizontal_lane_green>
				walk1_red(shiftRegisters);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa94 	bl	80006b8 <walk1_red>
				walk2_green(shiftRegisters);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fad5 	bl	8000742 <walk2_green>

				if (pl1_switch_on() == true) {
 8001198:	f7ff f9b2 	bl	8000500 <pl1_switch_on>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <main_program+0x552>
					pl1Pressed = true;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
				}
				if (pl1Pressed == true) {
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <main_program+0x566>
					pl1_toggle(shiftRegisters, toggleFreq);
 80011ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fa07 	bl	80005c8 <pl1_toggle>
			while ((HAL_GetTick() - counter) < walkingDelay) {
 80011ba:	f000 fae5 	bl	8001788 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d3d5      	bcc.n	8001178 <main_program+0x524>
				}
			}
			pl2Pressed = false;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73bb      	strb	r3, [r7, #14]

			counter = HAL_GetTick();
 80011d0:	f000 fada 	bl	8001788 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < orangeDelay) {
 80011d6:	e040      	b.n	800125a <main_program+0x606>
				vertical_lane_orange(shiftRegisters);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff faf7 	bl	80007ce <vertical_lane_orange>
				horizontal_lane_orange(shiftRegisters);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fb80 	bl	80008e8 <horizontal_lane_orange>
				walk1_red(shiftRegisters);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa64 	bl	80006b8 <walk1_red>
				walk2_red(shiftRegisters);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fa8e 	bl	8000714 <walk2_red>

				if (pl1_switch_on() == true) {
 80011f8:	f7ff f982 	bl	8000500 <pl1_switch_on>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <main_program+0x5b2>
					pl1Pressed = true;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
				}
				if (pl2_switch_on() == true) {
 8001206:	f7ff f98b 	bl	8000520 <pl2_switch_on>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <main_program+0x5c0>
					pl2Pressed = true;
 8001210:	2301      	movs	r3, #1
 8001212:	73bb      	strb	r3, [r7, #14]
				}

				if (pl1Pressed == true && pl2Pressed == true) {
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00a      	beq.n	8001230 <main_program+0x5dc>
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <main_program+0x5dc>
					both_toggle(shiftRegisters, toggleFreq);
 8001220:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa15 	bl	8000658 <both_toggle>
 800122e:	e014      	b.n	800125a <main_program+0x606>
				} else if (pl1Pressed == true) {
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <main_program+0x5f2>
					pl1_toggle(shiftRegisters, toggleFreq);
 8001236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f9c2 	bl	80005c8 <pl1_toggle>
 8001244:	e009      	b.n	800125a <main_program+0x606>
				} else if (pl2Pressed == true) {
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <main_program+0x606>
					pl2_toggle(shiftRegisters, toggleFreq);
 800124c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f9db 	bl	8000610 <pl2_toggle>
			while ((HAL_GetTick() - counter) < orangeDelay) {
 800125a:	f000 fa95 	bl	8001788 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001268:	4293      	cmp	r3, r2
 800126a:	d3b5      	bcc.n	80011d8 <main_program+0x584>
				}
			}
			next_state = V_LANE;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <main_program+0x6e0>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]

			break;
 8001272:	e05d      	b.n	8001330 <main_program+0x6dc>

		case SWAP_LANE:
			counter = HAL_GetTick();
 8001274:	f000 fa88 	bl	8001788 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
			while ((HAL_GetTick() - counter) < orangeDelay) {
 800127a:	e040      	b.n	80012fe <main_program+0x6aa>
				vertical_lane_orange(shiftRegisters);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff faa5 	bl	80007ce <vertical_lane_orange>
				horizontal_lane_orange(shiftRegisters);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb2e 	bl	80008e8 <horizontal_lane_orange>
				walk1_red(shiftRegisters);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fa12 	bl	80006b8 <walk1_red>
				walk2_red(shiftRegisters);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fa3c 	bl	8000714 <walk2_red>

				if (pl1_switch_on() == true) {
 800129c:	f7ff f930 	bl	8000500 <pl1_switch_on>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <main_program+0x656>
					pl1Pressed = true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
				}
				if (pl2_switch_on() == true) {
 80012aa:	f7ff f939 	bl	8000520 <pl2_switch_on>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <main_program+0x664>
					pl2Pressed = true;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73bb      	strb	r3, [r7, #14]
				}

				if (pl1Pressed == true && pl2Pressed == true) {
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <main_program+0x680>
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <main_program+0x680>
					both_toggle(shiftRegisters, toggleFreq);
 80012c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f9c3 	bl	8000658 <both_toggle>
 80012d2:	e014      	b.n	80012fe <main_program+0x6aa>
				} else if (pl1Pressed == true) {
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <main_program+0x696>
					pl1_toggle(shiftRegisters, toggleFreq);
 80012da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f970 	bl	80005c8 <pl1_toggle>
 80012e8:	e009      	b.n	80012fe <main_program+0x6aa>
				} else if (pl2Pressed == true) {
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <main_program+0x6aa>
					pl2_toggle(shiftRegisters, toggleFreq);
 80012f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f989 	bl	8000610 <pl2_toggle>
			while ((HAL_GetTick() - counter) < orangeDelay) {
 80012fe:	f000 fa43 	bl	8001788 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800130c:	4293      	cmp	r3, r2
 800130e:	d3b5      	bcc.n	800127c <main_program+0x628>
				}
			}

			if (prev_lane_state == V_LANE) {
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <main_program+0x6e4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <main_program+0x6cc>
				next_state = H_LANE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <main_program+0x6e0>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
			} else {
				next_state = V_LANE;
			}

			break;
 800131e:	e007      	b.n	8001330 <main_program+0x6dc>
				next_state = V_LANE;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <main_program+0x6e0>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
			break;
 8001326:	e003      	b.n	8001330 <main_program+0x6dc>
			break;
 8001328:	bf00      	nop
 800132a:	e4a0      	b.n	8000c6e <main_program+0x1a>
			break;
 800132c:	bf00      	nop
 800132e:	e49e      	b.n	8000c6e <main_program+0x1a>
		state = next_state;
 8001330:	e49d      	b.n	8000c6e <main_program+0x1a>
 8001332:	bf00      	nop
 8001334:	20000029 	.word	0x20000029
 8001338:	2000002a 	.word	0x2000002a

0800133c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_SPI3_Init+0x78>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800135a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_SPI3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_SPI3_Init+0x74>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001372:	2218      	movs	r2, #24
 8001374:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_SPI3_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_SPI3_Init+0x74>)
 800138a:	2207      	movs	r2, #7
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_SPI3_Init+0x74>)
 8001396:	2208      	movs	r2, #8
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_SPI3_Init+0x74>)
 800139c:	f002 f804 	bl	80033a8 <HAL_SPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f7ff fc4f 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000002c 	.word	0x2000002c
 80013b4:	40003c00 	.word	0x40003c00

080013b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_SPI_MspInit+0xb4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d144      	bne.n	8001464 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 80013e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_SPI_MspInit+0xb8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SHCP_595_Pin;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001434:	2306      	movs	r3, #6
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHCP_595_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <HAL_SPI_MspInit+0xbc>)
 8001440:	f000 fab8 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DS_595_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001454:	2306      	movs	r3, #6
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DS_595_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <HAL_SPI_MspInit+0xc0>)
 8001460:	f000 faa8 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40003c00 	.word	0x40003c00
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800
 8001478:	48000400 	.word	0x48000400

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x44>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_MspInit+0x44>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6613      	str	r3, [r2, #96]	; 0x60
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_MspInit+0x44>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_MspInit+0x44>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f926 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <MX_USART2_UART_Init+0x5c>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001580:	f002 fa8e 	bl	8003aa0 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800158a:	f7ff fb5d 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000090 	.word	0x20000090
 8001598:	40004400 	.word	0x40004400

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0ac      	sub	sp, #176	; 0xb0
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2288      	movs	r2, #136	; 0x88
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 ff8a 	bl	80044d6 <memset>
  if(uartHandle->Instance==USART2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <HAL_UART_MspInit+0xb0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d13b      	bne.n	8001644 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fa29 	bl	8002a30 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e4:	f7ff fb30 	bl	8000c48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0xb4>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_UART_MspInit+0xb4>)
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	6593      	str	r3, [r2, #88]	; 0x58
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0xb4>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0xb4>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_UART_MspInit+0xb4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_UART_MspInit+0xb4>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001618:	230c      	movs	r3, #12
 800161a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001630:	2307      	movs	r3, #7
 8001632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f000 f9b8 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001644:	bf00      	nop
 8001646:	37b0      	adds	r7, #176	; 0xb0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40004400 	.word	0x40004400
 8001650:	40021000 	.word	0x40021000

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff ff5e 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 ff31 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7ff fa7f 	bl	8000b88 <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001698:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 800169c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016a0:	2000011c 	.word	0x2000011c

080016a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_2_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_Init+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_Init+0x3c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f944 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 f80f 	bl	80016e8 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e001      	b.n	80016da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d6:	f7ff fed1 	bl	800147c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016da:	79fb      	ldrb	r3, [r7, #7]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_InitTick+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_InitTick+0x70>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_InitTick+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f941 	bl	800199a <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d809      	bhi.n	8001738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f919 	bl	8001962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_InitTick+0x74>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e007      	b.n	8001748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e001      	b.n	8001748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	20000118 	.word	0x20000118

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000118 	.word	0x20000118

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff47 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff5c 	bl	8001830 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffb0 	bl	8001908 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e17f      	b.n	8001cc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8171 	beq.w	8001cbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d005      	beq.n	80019f4 <HAL_GPIO_Init+0x40>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d130      	bne.n	8001a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 0201 	and.w	r2, r3, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d118      	bne.n	8001a94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	6939      	ldr	r1, [r7, #16]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ac 	beq.w	8001cbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6613      	str	r3, [r2, #96]	; 0x60
 8001b72:	4b5c      	ldr	r3, [pc, #368]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x242>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x338>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x23e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_GPIO_Init+0x33c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x23a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x340>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x236>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x344>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x348>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x22e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x34c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x22a>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3a:	4a32      	ldr	r2, [pc, #200]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f47f ae78 	bne.w	80019c4 <HAL_GPIO_Init+0x10>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	48001000 	.word	0x48001000
 8001cfc:	48001400 	.word	0x48001400
 8001d00:	48001800 	.word	0x48001800
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40007000 	.word	0x40007000

08001d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d130      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d038      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2232      	movs	r2, #50	; 0x32
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc8:	e002      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ddc:	d102      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f2      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	d110      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e00f      	b.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e02:	d007      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e0c:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e3ca      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4c:	4b94      	ldr	r3, [pc, #592]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80e4 	beq.w	800202c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4a>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	f040 808b 	bne.w	8001f88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8087 	bne.w	8001f88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e3a2      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_RCC_OscConfig+0x7c>
 8001ea2:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_OscConfig+0x88>
 8001eac:	4b7c      	ldr	r3, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d223      	bcs.n	8001f04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fd55 	bl	8002970 <RCC_SetFlashLatencyFromMSIRange>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e383      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	496d      	ldr	r1, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	4968      	ldr	r1, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
 8001f02:	e025      	b.n	8001f50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4960      	ldr	r1, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	495b      	ldr	r1, [pc, #364]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fd15 	bl	8002970 <RCC_SetFlashLatencyFromMSIRange>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e343      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f50:	f000 fc4a 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	4950      	ldr	r1, [pc, #320]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_RCC_OscConfig+0x278>)
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f70:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <HAL_RCC_OscConfig+0x27c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fbb7 	bl	80016e8 <HAL_InitTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d052      	beq.n	800202a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	e327      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d032      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f90:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a42      	ldr	r2, [pc, #264]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fbf4 	bl	8001788 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fbf0 	bl	8001788 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e310      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4931      	ldr	r1, [pc, #196]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	492c      	ldr	r1, [pc, #176]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e01a      	b.n	800202c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002002:	f7ff fbc1 	bl	8001788 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200a:	f7ff fbbd 	bl	8001788 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e2dd      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x1da>
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d074      	beq.n	8002122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x21a>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d10e      	bne.n	8002062 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d064      	beq.n	8002120 <HAL_RCC_OscConfig+0x2f0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d160      	bne.n	8002120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e2ba      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x24a>
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e026      	b.n	80020c8 <HAL_RCC_OscConfig+0x298>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_OscConfig+0x280>
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 800208a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a02      	ldr	r2, [pc, #8]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x298>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08004548 	.word	0x08004548
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004
 80020b0:	4ba0      	ldr	r3, [pc, #640]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a9f      	ldr	r2, [pc, #636]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b9d      	ldr	r3, [pc, #628]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a9c      	ldr	r2, [pc, #624]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff fb5a 	bl	8001788 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fb56 	bl	8001788 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e276      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff fb46 	bl	8001788 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fb42 	bl	8001788 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e262      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x2d0>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d060      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x310>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d119      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x328>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e23f      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4973      	ldr	r1, [pc, #460]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	e040      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d023      	beq.n	80021be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff fb01 	bl	8001788 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fafd 	bl	8001788 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e21d      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	4b65      	ldr	r3, [pc, #404]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	495f      	ldr	r1, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e018      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5c      	ldr	r2, [pc, #368]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7ff fadd 	bl	8001788 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fad9 	bl	8001788 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1f9      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03c      	beq.n	8002276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff fab8 	bl	8001788 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fab4 	bl	8001788 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1d4      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x3ec>
 800223c:	e01b      	b.n	8002276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002244:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7ff fa9b 	bl	8001788 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fa97 	bl	8001788 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1b7      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ef      	bne.n	8002256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a6 	beq.w	80023d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x508>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x508>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x508>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fa5e 	bl	8001788 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7ff fa5a 	bl	8001788 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e17a      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_RCC_OscConfig+0x508>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d8>
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002306:	e029      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d115      	bne.n	800233c <HAL_RCC_OscConfig+0x50c>
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a03      	ldr	r2, [pc, #12]	; (8002334 <HAL_RCC_OscConfig+0x504>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	4b9c      	ldr	r3, [pc, #624]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	4a9b      	ldr	r2, [pc, #620]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234c:	4b98      	ldr	r3, [pc, #608]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a97      	ldr	r2, [pc, #604]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d016      	beq.n	8002392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff fa10 	bl	8001788 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff fa0c 	bl	8001788 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e12a      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ed      	beq.n	800236c <HAL_RCC_OscConfig+0x53c>
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7ff f9f9 	bl	8001788 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff f9f5 	bl	8001788 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e113      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ed      	bne.n	800239a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80fe 	beq.w	80025d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	2b02      	cmp	r3, #2
 80023e0:	f040 80d0 	bne.w	8002584 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e4:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d130      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	3b01      	subs	r3, #1
 8002404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d127      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11f      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002424:	2a07      	cmp	r2, #7
 8002426:	bf14      	ite	ne
 8002428:	2201      	movne	r2, #1
 800242a:	2200      	moveq	r2, #0
 800242c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242e:	4293      	cmp	r3, r2
 8002430:	d113      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	3b01      	subs	r3, #1
 8002440:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d109      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	3b01      	subs	r3, #1
 8002454:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d06e      	beq.n	8002538 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d069      	beq.n	8002534 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0ad      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002488:	f7ff f97e 	bl	8001788 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff f97a 	bl	8001788 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e09a      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_RCC_OscConfig+0x784>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024be:	3a01      	subs	r2, #1
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c8:	0212      	lsls	r2, r2, #8
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0552      	lsls	r2, r2, #21
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024dc:	0852      	lsrs	r2, r2, #1
 80024de:	3a01      	subs	r2, #1
 80024e0:	0652      	lsls	r2, r2, #25
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e8:	0912      	lsrs	r2, r2, #4
 80024ea:	0452      	lsls	r2, r2, #17
 80024ec:	430a      	orrs	r2, r1
 80024ee:	4930      	ldr	r1, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800250c:	f7ff f93c 	bl	8001788 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff f938 	bl	8001788 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e058      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002532:	e050      	b.n	80025d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04f      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d148      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800255c:	f7ff f914 	bl	8001788 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff f910 	bl	8001788 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e030      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x734>
 8002582:	e028      	b.n	80025d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d023      	beq.n	80025d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_RCC_OscConfig+0x780>)
 8002590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7ff f8f7 	bl	8001788 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	e00c      	b.n	80025b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff f8f3 	bl	8001788 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d905      	bls.n	80025b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x7b0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ec      	bne.n	800259e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x7b0>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4905      	ldr	r1, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x7b0>)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x7b4>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
 80025d0:	e001      	b.n	80025d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	feeefffc 	.word	0xfeeefffc

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0e7      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4970      	ldr	r1, [pc, #448]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0cf      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002644:	429a      	cmp	r2, r3
 8002646:	d908      	bls.n	800265a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4960      	ldr	r1, [pc, #384]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04c      	beq.n	8002700 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d121      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0a6      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e09a      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e08e      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e086      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4943      	ldr	r1, [pc, #268]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7ff f85a 	bl	8001788 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7ff f856 	bl	8001788 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e06e      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	429a      	cmp	r2, r3
 800271a:	d208      	bcs.n	800272e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	492b      	ldr	r1, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d210      	bcs.n	800275e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 0207 	bic.w	r2, r3, #7
 8002744:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e036      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4918      	ldr	r1, [pc, #96]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4910      	ldr	r1, [pc, #64]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279c:	f000 f824 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	490b      	ldr	r1, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1f4>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1fc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe ff91 	bl	80016e8 <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08004548 	.word	0x08004548
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d121      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d11e      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e005      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d102      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	e004      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d101      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_GetSysClockFreq+0x114>)
 800286e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d134      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0xa6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d003      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0xac>
 800288c:	e005      	b.n	800289a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002890:	617b      	str	r3, [r7, #20]
      break;
 8002892:	e005      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002896:	617b      	str	r3, [r7, #20]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	617b      	str	r3, [r7, #20]
      break;
 800289e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	3301      	adds	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	fb03 f202 	mul.w	r2, r3, r2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	0e5b      	lsrs	r3, r3, #25
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	3301      	adds	r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028e0:	69bb      	ldr	r3, [r7, #24]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004560 	.word	0x08004560
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	007a1200 	.word	0x007a1200

08002900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	08004558 	.word	0x08004558

08002944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002948:	f7ff ffda 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	0adb      	lsrs	r3, r3, #11
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4904      	ldr	r1, [pc, #16]	; (800296c <HAL_RCC_GetPCLK2Freq+0x28>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	08004558 	.word	0x08004558

08002970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002988:	f7ff f9ee 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 800298c:	6178      	str	r0, [r7, #20]
 800298e:	e014      	b.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029a8:	f7ff f9de 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 80029ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d10b      	bne.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d919      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2ba0      	cmp	r3, #160	; 0xa0
 80029cc:	d902      	bls.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ce:	2302      	movs	r3, #2
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e013      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d4:	2301      	movs	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e010      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d902      	bls.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029e0:	2303      	movs	r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e00a      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b80      	cmp	r3, #128	; 0x80
 80029ea:	d102      	bne.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ec:	2302      	movs	r3, #2
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	e004      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b70      	cmp	r3, #112	; 0x70
 80029f6:	d101      	bne.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 0207 	bic.w	r2, r3, #7
 8002a04:	4909      	ldr	r1, [pc, #36]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40022000 	.word	0x40022000

08002a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a38:	2300      	movs	r3, #0
 8002a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d041      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a54:	d02a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a5a:	d824      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a66:	d81e      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a70:	d010      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a72:	e018      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a74:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a85      	ldr	r2, [pc, #532]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a80:	e015      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fabb 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a92:	e00c      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3320      	adds	r3, #32
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fba6 	bl	80031ec <RCCEx_PLLSAI2_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa4:	e003      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8002aaa:	e000      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab4:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4973      	ldr	r1, [pc, #460]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d041      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ae4:	d02a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ae6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002aea:	d824      	bhi.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af6:	d81e      	bhi.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d010      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b02:	e018      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b04:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a61      	ldr	r2, [pc, #388]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b10:	e015      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fa73 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b22:	e00c      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3320      	adds	r3, #32
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fb5e 	bl	80031ec <RCCEx_PLLSAI2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	74fb      	strb	r3, [r7, #19]
      break;
 8002b3a:	e000      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b44:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b52:	494f      	ldr	r1, [pc, #316]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a0 	beq.w	8002cae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fdea 	bl	8001788 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe fde6 	bl	8001788 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	74fb      	strb	r3, [r7, #19]
        break;
 8002bca:	e005      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ef      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d15c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01f      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fda5 	bl	8001788 <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c40:	e00b      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fda1 	bl	8001788 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	74fb      	strb	r3, [r7, #19]
            break;
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ec      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c86:	e009      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	74bb      	strb	r3, [r7, #18]
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c9c:	7c7b      	ldrb	r3, [r7, #17]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d105      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca2:	4b9e      	ldr	r3, [pc, #632]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	4a9d      	ldr	r2, [pc, #628]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cba:	4b98      	ldr	r3, [pc, #608]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 0203 	bic.w	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	4994      	ldr	r1, [pc, #592]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 020c 	bic.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	498c      	ldr	r1, [pc, #560]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cfe:	4b87      	ldr	r3, [pc, #540]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4983      	ldr	r1, [pc, #524]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d20:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	497b      	ldr	r1, [pc, #492]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	4972      	ldr	r1, [pc, #456]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	496a      	ldr	r1, [pc, #424]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	4961      	ldr	r1, [pc, #388]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002da8:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	4959      	ldr	r1, [pc, #356]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dca:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd8:	4950      	ldr	r1, [pc, #320]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	4948      	ldr	r1, [pc, #288]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	493f      	ldr	r1, [pc, #252]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d028      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5a:	60d3      	str	r3, [r2, #12]
 8002e5c:	e011      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e66:	d10c      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f8c8 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	491f      	ldr	r1, [pc, #124]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb8:	60d3      	str	r3, [r2, #12]
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f899 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02b      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0a:	d109      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a02      	ldr	r2, [pc, #8]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
 8002f18:	e014      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f867 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02f      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5e:	4928      	ldr	r1, [pc, #160]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f844 	bl	8003004 <RCCEx_PLLSAI1_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d014      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	74bb      	strb	r3, [r7, #18]
 8002f8a:	e011      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3320      	adds	r3, #32
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f925 	bl	80031ec <RCCEx_PLLSAI2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fca:	490d      	ldr	r1, [pc, #52]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4904      	ldr	r1, [pc, #16]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ff6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000

08003004 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003012:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800301e:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d10d      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
       ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003036:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
       ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d047      	beq.n	80030da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e044      	b.n	80030da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d018      	beq.n	800308a <RCCEx_PLLSAI1_Config+0x86>
 8003058:	2b03      	cmp	r3, #3
 800305a:	d825      	bhi.n	80030a8 <RCCEx_PLLSAI1_Config+0xa4>
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0x62>
 8003060:	2b02      	cmp	r3, #2
 8003062:	d009      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x74>
 8003064:	e020      	b.n	80030a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003066:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11d      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e01a      	b.n	80030ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e013      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030a6:	e006      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e004      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	430b      	orrs	r3, r1
 80030d4:	4944      	ldr	r1, [pc, #272]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d17d      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fb4c 	bl	8001788 <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f2:	e009      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f4:	f7fe fb48 	bl	8001788 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
        break;
 8003106:	e005      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003108:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ef      	bne.n	80030f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d160      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	0211      	lsls	r1, r2, #8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	0912      	lsrs	r2, r2, #4
 8003138:	0452      	lsls	r2, r2, #17
 800313a:	430a      	orrs	r2, r1
 800313c:	492a      	ldr	r1, [pc, #168]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	610b      	str	r3, [r1, #16]
 8003142:	e027      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d112      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003152:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	0211      	lsls	r1, r2, #8
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6912      	ldr	r2, [r2, #16]
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	430a      	orrs	r2, r1
 8003168:	491f      	ldr	r1, [pc, #124]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	610b      	str	r3, [r1, #16]
 800316e:	e011      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003178:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	0211      	lsls	r1, r2, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6952      	ldr	r2, [r2, #20]
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	3a01      	subs	r2, #1
 800318a:	0652      	lsls	r2, r2, #25
 800318c:	430a      	orrs	r2, r1
 800318e:	4916      	ldr	r1, [pc, #88]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe faf2 	bl	8001788 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a8:	f7fe faee 	bl	8001788 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	4904      	ldr	r1, [pc, #16]	; (80031e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000

080031ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fa:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d10d      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
       ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800321e:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
       ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d047      	beq.n	80032c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e044      	b.n	80032c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d018      	beq.n	8003272 <RCCEx_PLLSAI2_Config+0x86>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d825      	bhi.n	8003290 <RCCEx_PLLSAI2_Config+0xa4>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <RCCEx_PLLSAI2_Config+0x62>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d009      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x74>
 800324c:	e020      	b.n	8003290 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800324e:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e01a      	b.n	8003296 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e013      	b.n	800329a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003272:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327e:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800328e:	e006      	b.n	800329e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800329e:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	430b      	orrs	r3, r1
 80032bc:	4939      	ldr	r1, [pc, #228]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d167      	bne.n	8003398 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fe fa58 	bl	8001788 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032dc:	f7fe fa54 	bl	8001788 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
        break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032f0:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ef      	bne.n	80032dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d14a      	bne.n	8003398 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
 8003318:	0211      	lsls	r1, r2, #8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	0912      	lsrs	r2, r2, #4
 8003320:	0452      	lsls	r2, r2, #17
 8003322:	430a      	orrs	r2, r1
 8003324:	491f      	ldr	r1, [pc, #124]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	614b      	str	r3, [r1, #20]
 800332a:	e011      	b.n	8003350 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003334:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6892      	ldr	r2, [r2, #8]
 800333c:	0211      	lsls	r1, r2, #8
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6912      	ldr	r2, [r2, #16]
 8003342:	0852      	lsrs	r2, r2, #1
 8003344:	3a01      	subs	r2, #1
 8003346:	0652      	lsls	r2, r2, #25
 8003348:	430a      	orrs	r2, r1
 800334a:	4916      	ldr	r1, [pc, #88]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	4313      	orrs	r3, r2
 800334e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe fa14 	bl	8001788 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003364:	f7fe fa10 	bl	8001788 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
          break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4904      	ldr	r1, [pc, #16]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e095      	b.n	80034e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d009      	beq.n	80033e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
 80033d2:	e005      	b.n	80033e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd ffdc 	bl	80013b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003420:	d902      	bls.n	8003428 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e002      	b.n	800342e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003436:	d007      	beq.n	8003448 <HAL_SPI_Init+0xa0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003440:	d002      	beq.n	8003448 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	ea42 0103 	orr.w	r1, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	f003 0204 	and.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034c4:	ea42 0103 	orr.w	r1, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b088      	sub	sp, #32
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_SPI_Transmit+0x22>
 800350c:	2302      	movs	r3, #2
 800350e:	e15f      	b.n	80037d0 <HAL_SPI_Transmit+0x2e2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003518:	f7fe f936 	bl	8001788 <HAL_GetTick>
 800351c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003532:	e148      	b.n	80037c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Transmit+0x52>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003544:	e13f      	b.n	80037c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	d10f      	bne.n	80035b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d8:	d94f      	bls.n	800367a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0xfa>
 80035e2:	8afb      	ldrh	r3, [r7, #22]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d142      	bne.n	800366e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800360c:	e02f      	b.n	800366e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d112      	bne.n	8003642 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003640:	e015      	b.n	800366e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fe f8a1 	bl	8001788 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Transmit+0x16c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Transmit+0x172>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800366c:	e0ab      	b.n	80037c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ca      	bne.n	800360e <HAL_SPI_Transmit+0x120>
 8003678:	e080      	b.n	800377c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0x19a>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d174      	bne.n	8003772 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d912      	bls.n	80036b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b02      	subs	r3, #2
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b6:	e05c      	b.n	8003772 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036de:	e048      	b.n	8003772 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d12b      	bne.n	8003746 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d912      	bls.n	800371e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b02      	subs	r3, #2
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800371c:	e029      	b.n	8003772 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003744:	e015      	b.n	8003772 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003746:	f7fe f81f 	bl	8001788 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d803      	bhi.n	800375e <HAL_SPI_Transmit+0x270>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Transmit+0x276>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003770:	e029      	b.n	80037c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1b1      	bne.n	80036e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f947 	bl	8003a14 <SPI_EndRxTxTransaction>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e003      	b.n	80037c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e8:	f7fd ffce 	bl	8001788 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f8:	f7fd ffc6 	bl	8001788 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	015b      	lsls	r3, r3, #5
 8003804:	0d1b      	lsrs	r3, r3, #20
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380e:	e054      	b.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d050      	beq.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003818:	f7fd ffb6 	bl	8001788 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	429a      	cmp	r2, r3
 8003826:	d902      	bls.n	800382e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13d      	bne.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800383c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003846:	d111      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	d004      	beq.n	800385c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d107      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003874:	d10f      	bne.n	8003896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e017      	b.n	80038da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d19b      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038fa:	f7fd ff45 	bl	8001788 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4413      	add	r3, r2
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800390a:	f7fd ff3d 	bl	8001788 <HAL_GetTick>
 800390e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	0d1b      	lsrs	r3, r3, #20
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003930:	e060      	b.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003938:	d107      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003948:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d050      	beq.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003952:	f7fd ff19 	bl	8001788 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	429a      	cmp	r2, r3
 8003960:	d902      	bls.n	8003968 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13d      	bne.n	80039e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003976:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003980:	d111      	bne.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398a:	d004      	beq.n	8003996 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d107      	bne.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d10f      	bne.n	80039d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e010      	b.n	8003a06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d196      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ff5b 	bl	80038e8 <SPI_WaitFifoStateUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e027      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff fec0 	bl	80037d8 <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e014      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff ff34 	bl	80038e8 <SPI_WaitFifoStateUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e000      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e040      	b.n	8003b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fd6a 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fae0 	bl	80040ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f825 	bl	8003b3c <UART_SetConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e01b      	b.n	8003b34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fb5f 	bl	80041f0 <UART_CheckIdleState>
 8003b32:	4603      	mov	r3, r0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b08a      	sub	sp, #40	; 0x28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4ba4      	ldr	r3, [pc, #656]	; (8003dfc <UART_SetConfig+0x2c0>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a99      	ldr	r2, [pc, #612]	; (8003e00 <UART_SetConfig+0x2c4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a90      	ldr	r2, [pc, #576]	; (8003e04 <UART_SetConfig+0x2c8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d126      	bne.n	8003c14 <UART_SetConfig+0xd8>
 8003bc6:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d81b      	bhi.n	8003c0c <UART_SetConfig+0xd0>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0xa0>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003c05 	.word	0x08003c05
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e116      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e112      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e10e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e10a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e106      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <UART_SetConfig+0x2d0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d138      	bne.n	8003c90 <UART_SetConfig+0x154>
 8003c1e:	4b7a      	ldr	r3, [pc, #488]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d82d      	bhi.n	8003c88 <UART_SetConfig+0x14c>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0xf8>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	08003c89 	.word	0x08003c89
 8003c40:	08003c89 	.word	0x08003c89
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c89 	.word	0x08003c89
 8003c4c:	08003c89 	.word	0x08003c89
 8003c50:	08003c89 	.word	0x08003c89
 8003c54:	08003c71 	.word	0x08003c71
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e0d8      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e0d4      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e0d0      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e0cc      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e0c8      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d125      	bne.n	8003ce6 <UART_SetConfig+0x1aa>
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d016      	beq.n	8003cd6 <UART_SetConfig+0x19a>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d818      	bhi.n	8003cde <UART_SetConfig+0x1a2>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d00a      	beq.n	8003cc6 <UART_SetConfig+0x18a>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d814      	bhi.n	8003cde <UART_SetConfig+0x1a2>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <UART_SetConfig+0x182>
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d008      	beq.n	8003cce <UART_SetConfig+0x192>
 8003cbc:	e00f      	b.n	8003cde <UART_SetConfig+0x1a2>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc4:	e0ad      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ccc:	e0a9      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd4:	e0a5      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cdc:	e0a1      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce4:	e09d      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <UART_SetConfig+0x2d8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d125      	bne.n	8003d3c <UART_SetConfig+0x200>
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003cfc:	d016      	beq.n	8003d2c <UART_SetConfig+0x1f0>
 8003cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8003d00:	d818      	bhi.n	8003d34 <UART_SetConfig+0x1f8>
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d00a      	beq.n	8003d1c <UART_SetConfig+0x1e0>
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x1f8>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <UART_SetConfig+0x1d8>
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d008      	beq.n	8003d24 <UART_SetConfig+0x1e8>
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x1f8>
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e082      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e07e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e07a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e076      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3a:	e072      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <UART_SetConfig+0x2dc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12a      	bne.n	8003d9c <UART_SetConfig+0x260>
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d54:	d01a      	beq.n	8003d8c <UART_SetConfig+0x250>
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0x258>
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d00c      	beq.n	8003d7c <UART_SetConfig+0x240>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d815      	bhi.n	8003d94 <UART_SetConfig+0x258>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <UART_SetConfig+0x238>
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d70:	d008      	beq.n	8003d84 <UART_SetConfig+0x248>
 8003d72:	e00f      	b.n	8003d94 <UART_SetConfig+0x258>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e052      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e04e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e04a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e046      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e042      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <UART_SetConfig+0x2c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d13a      	bne.n	8003e1c <UART_SetConfig+0x2e0>
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db4:	d01a      	beq.n	8003dec <UART_SetConfig+0x2b0>
 8003db6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0x2b8>
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d00c      	beq.n	8003ddc <UART_SetConfig+0x2a0>
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d815      	bhi.n	8003df4 <UART_SetConfig+0x2b8>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <UART_SetConfig+0x298>
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d008      	beq.n	8003de4 <UART_SetConfig+0x2a8>
 8003dd2:	e00f      	b.n	8003df4 <UART_SetConfig+0x2b8>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e022      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e01e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e01a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e016      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e012      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003dfc:	efff69f3 	.word	0xefff69f3
 8003e00:	40008000 	.word	0x40008000
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40004400 	.word	0x40004400
 8003e10:	40004800 	.word	0x40004800
 8003e14:	40004c00 	.word	0x40004c00
 8003e18:	40005000 	.word	0x40005000
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a9f      	ldr	r2, [pc, #636]	; (80040a4 <UART_SetConfig+0x568>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d17a      	bne.n	8003f22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d824      	bhi.n	8003e7e <UART_SetConfig+0x342>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x300>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e6f 	.word	0x08003e6f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e7f 	.word	0x08003e7f
 8003e5c:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fd5a 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
        break;
 8003e66:	e010      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <UART_SetConfig+0x56c>)
 8003e6a:	61fb      	str	r3, [r7, #28]
        break;
 8003e6c:	e00d      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe fcbb 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8003e72:	61f8      	str	r0, [r7, #28]
        break;
 8003e74:	e009      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	61fb      	str	r3, [r7, #28]
        break;
 8003e7c:	e005      	b.n	8003e8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80fb 	beq.w	8004088 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d305      	bcc.n	8003eae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d903      	bls.n	8003eb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eb4:	e0e8      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	461c      	mov	r4, r3
 8003ebc:	4615      	mov	r5, r2
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	022b      	lsls	r3, r5, #8
 8003ec8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ecc:	0222      	lsls	r2, r4, #8
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	6849      	ldr	r1, [r1, #4]
 8003ed2:	0849      	lsrs	r1, r1, #1
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4688      	mov	r8, r1
 8003ed8:	4681      	mov	r9, r0
 8003eda:	eb12 0a08 	adds.w	sl, r2, r8
 8003ede:	eb43 0b09 	adc.w	fp, r3, r9
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef0:	4650      	mov	r0, sl
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	f7fc f968 	bl	80001c8 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d308      	bcc.n	8003f1a <UART_SetConfig+0x3de>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d204      	bcs.n	8003f1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e0b6      	b.n	8004088 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f20:	e0b2      	b.n	8004088 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d15e      	bne.n	8003fea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d828      	bhi.n	8003f86 <UART_SetConfig+0x44a>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x400>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe fcda 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e014      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7fe fcec 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	61f8      	str	r0, [r7, #28]
        break;
 8003f6e:	e010      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <UART_SetConfig+0x56c>)
 8003f72:	61fb      	str	r3, [r7, #28]
        break;
 8003f74:	e00d      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe fc37 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8003f7a:	61f8      	str	r0, [r7, #28]
        break;
 8003f7c:	e009      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f82:	61fb      	str	r3, [r7, #28]
        break;
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d077      	beq.n	8004088 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005a      	lsls	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b0f      	cmp	r3, #15
 8003fb2:	d916      	bls.n	8003fe2 <UART_SetConfig+0x4a6>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d212      	bcs.n	8003fe2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	8afa      	ldrh	r2, [r7, #22]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e052      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe8:	e04e      	b.n	8004088 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d827      	bhi.n	8004042 <UART_SetConfig+0x506>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x4bc>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004043 	.word	0x08004043
 8004008:	08004033 	.word	0x08004033
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe fc7c 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e014      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fc8e 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8004028:	61f8      	str	r0, [r7, #28]
        break;
 800402a:	e010      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <UART_SetConfig+0x56c>)
 800402e:	61fb      	str	r3, [r7, #28]
        break;
 8004030:	e00d      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fbd9 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8004036:	61f8      	str	r0, [r7, #28]
        break;
 8004038:	e009      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61fb      	str	r3, [r7, #28]
        break;
 8004040:	e005      	b.n	800404e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800404c:	bf00      	nop
    }

    if (pclk != 0U)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d019      	beq.n	8004088 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	085a      	lsrs	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	441a      	add	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d909      	bls.n	8004082 <UART_SetConfig+0x546>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d205      	bcs.n	8004082 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	e002      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a2:	bf00      	nop
 80040a4:	40008000 	.word	0x40008000
 80040a8:	00f42400 	.word	0x00f42400

080040ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01a      	beq.n	80041c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d10a      	bne.n	80041c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  }
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b098      	sub	sp, #96	; 0x60
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004200:	f7fd fac2 	bl	8001788 <HAL_GetTick>
 8004204:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d12e      	bne.n	8004272 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f88c 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d021      	beq.n	8004272 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004242:	653b      	str	r3, [r7, #80]	; 0x50
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
 800424e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e6      	bne.n	800422e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e062      	b.n	8004338 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d149      	bne.n	8004314 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f856 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d03c      	beq.n	8004314 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	623b      	str	r3, [r7, #32]
   return(result);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e6      	bne.n	800429a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	60fb      	str	r3, [r7, #12]
   return(result);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	617b      	str	r3, [r7, #20]
   return(result);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e011      	b.n	8004338 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3758      	adds	r7, #88	; 0x58
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e049      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d045      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd fa15 	bl	8001788 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e048      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d031      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d110      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f838 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2208      	movs	r2, #8
 80043a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e029      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c0:	d111      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f81e 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e00f      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d0a6      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440e:	b480      	push	{r7}
 8004410:	b095      	sub	sp, #84	; 0x54
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800442a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	643b      	str	r3, [r7, #64]	; 0x40
 8004436:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800443a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	61fb      	str	r3, [r7, #28]
   return(result);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3308      	adds	r3, #8
 8004466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	2b01      	cmp	r3, #1
 8004482:	d118      	bne.n	80044b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	60bb      	str	r3, [r7, #8]
   return(result);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6979      	ldr	r1, [r7, #20]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	613b      	str	r3, [r7, #16]
   return(result);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044ca:	bf00      	nop
 80044cc:	3754      	adds	r7, #84	; 0x54
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <memset>:
 80044d6:	4402      	add	r2, r0
 80044d8:	4603      	mov	r3, r0
 80044da:	4293      	cmp	r3, r2
 80044dc:	d100      	bne.n	80044e0 <memset+0xa>
 80044de:	4770      	bx	lr
 80044e0:	f803 1b01 	strb.w	r1, [r3], #1
 80044e4:	e7f9      	b.n	80044da <memset+0x4>
	...

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	; (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	; (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	; (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	; (800452c <__libc_init_array+0x44>)
 80044fc:	f000 f818 	bl	8004530 <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08004598 	.word	0x08004598
 8004524:	08004598 	.word	0x08004598
 8004528:	08004598 	.word	0x08004598
 800452c:	0800459c 	.word	0x0800459c

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
